AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  restaurant-rest-api

  Sample SAM Template for restaurant-rest-api

Globals:
  Function:
    Timeout: 20

    LoggingConfig:
      LogFormat: JSON
Resources:
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: DBSecret
      Description: Credentials for the pg rds instance
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  PGDatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      EngineVersion: "14.10"
      Engine: postgres
      AllocatedStorage: 20
      MasterUsername: '{{resolve:secretsmanager:DBSecret:SecretString:username}}'
      MasterUserPassword: '{{resolve:secretsmanager:DBSecret:SecretString:password}}'
      PubliclyAccessible: true

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        ApiKeyRequired: false
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  CreateIngredientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: rest/
      Handler: api/ingredients/create.lambdaHandler
      Environment: 
        Variables:
          PG_PORT: !GetAtt PGDatabaseInstance.Endpoint.Port
          PG_HOST: !GetAtt PGDatabaseInstance.Endpoint.Address
          PG_USER: '{{resolve:secretsmanager:DBSecret:SecretString:username}}'
          PG_PASS: '{{resolve:secretsmanager:DBSecret:SecretString:password}}'
          PG_DB: 'rest'
          PG_MIGRATE: 'false'
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        Create:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /ingredients
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - api/ingredients/create.ts

  GetIngredientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: rest/
      Handler: api/ingredients/get.lambdaHandler
      Environment: 
        Variables:
          PG_PORT: !GetAtt PGDatabaseInstance.Endpoint.Port
          PG_HOST: !GetAtt PGDatabaseInstance.Endpoint.Address
          PG_USER: '{{resolve:secretsmanager:DBSecret:SecretString:username}}'
          PG_PASS: '{{resolve:secretsmanager:DBSecret:SecretString:password}}'
          PG_DB: 'rest'
          PG_MIGRATE: 'false'
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        Create:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /ingredients/{id}
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - api/ingredients/get.ts

  UpdateIngredientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: rest/
      Handler: api/ingredients/update.lambdaHandler
      Environment: 
        Variables:
          PG_PORT: !GetAtt PGDatabaseInstance.Endpoint.Port
          PG_HOST: !GetAtt PGDatabaseInstance.Endpoint.Address
          PG_USER: '{{resolve:secretsmanager:DBSecret:SecretString:username}}'
          PG_PASS: '{{resolve:secretsmanager:DBSecret:SecretString:password}}'
          PG_DB: 'rest'
          PG_MIGRATE: 'false'
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        Create:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /ingredients/{id}
            Method: put
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - api/ingredients/update.ts

  ListIngredientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: rest/
      Handler: api/ingredients/list.lambdaHandler
      Environment: 
        Variables:
          PG_PORT: !GetAtt PGDatabaseInstance.Endpoint.Port
          PG_HOST: !GetAtt PGDatabaseInstance.Endpoint.Address
          PG_USER: '{{resolve:secretsmanager:DBSecret:SecretString:username}}'
          PG_PASS: '{{resolve:secretsmanager:DBSecret:SecretString:password}}'
          PG_DB: 'rest'
          PG_MIGRATE: 'false'
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        Create:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /ingredients
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - api/ingredients/list.ts

  CreateMenuItem:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: rest/
      Handler: api/menu-item/create.lambdaHandler
      Environment: 
        Variables:
          PG_PORT: !GetAtt PGDatabaseInstance.Endpoint.Port
          PG_HOST: !GetAtt PGDatabaseInstance.Endpoint.Address
          PG_USER: '{{resolve:secretsmanager:DBSecret:SecretString:username}}'
          PG_PASS: '{{resolve:secretsmanager:DBSecret:SecretString:password}}'
          PG_DB: 'rest'
          PG_MIGRATE: 'false'
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        Create:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /menu
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - api/menu-item/create.ts

  DeleteMenuItem:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: rest/
      Handler: api/menu-item/delete.lambdaHandler
      Environment: 
        Variables:
          PG_PORT: !GetAtt PGDatabaseInstance.Endpoint.Port
          PG_HOST: !GetAtt PGDatabaseInstance.Endpoint.Address
          PG_USER: '{{resolve:secretsmanager:DBSecret:SecretString:username}}'
          PG_PASS: '{{resolve:secretsmanager:DBSecret:SecretString:password}}'
          PG_DB: 'rest'
          PG_MIGRATE: 'false'
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        Create:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /menu/{id}
            Method: delete
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - api/menu-item/delete.ts

  GetMenuItem:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: rest/
      Handler: api/menu-item/get.lambdaHandler
      Environment: 
        Variables:
          PG_PORT: !GetAtt PGDatabaseInstance.Endpoint.Port
          PG_HOST: !GetAtt PGDatabaseInstance.Endpoint.Address
          PG_USER: '{{resolve:secretsmanager:DBSecret:SecretString:username}}'
          PG_PASS: '{{resolve:secretsmanager:DBSecret:SecretString:password}}'
          PG_DB: 'rest'
          PG_MIGRATE: 'false'
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        Create:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /menu/{id}
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - api/menu-item/get.ts

  ListMenuItems:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: rest/
      Handler: api/menu-item/list.lambdaHandler
      Environment: 
        Variables:
          PG_PORT: !GetAtt PGDatabaseInstance.Endpoint.Port
          PG_HOST: !GetAtt PGDatabaseInstance.Endpoint.Address
          PG_USER: '{{resolve:secretsmanager:DBSecret:SecretString:username}}'
          PG_PASS: '{{resolve:secretsmanager:DBSecret:SecretString:password}}'
          PG_DB: 'rest'
          PG_MIGRATE: 'false'
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        Create:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /menu
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - api/menu-item/list.ts

Outputs:
  IngredientFunction:
    Description: API Gateway endpoint URL for Prod stage for Create Ingredient Function
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/ingredients/"
